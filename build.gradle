apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "sonar-runner"

// 'eclipse' plugin is used to generate native project files for Eclipse
// from this Gradle script - for those who don't have Gradle plugin installed in Eclipse
apply plugin: 'eclipse'

group = 'com.tocea.redmine'
version = '2.5.0-SNAPSHOT'

// Default Sonar properties
def sonarJdbcURL = hasProperty("sonarJdbcURL") ? sonarJdbcURL :"jdbc:mysql://192.168.1.1:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
def sonarHostURL = hasProperty("sonarHostURL") ? sonarHostURL :  "http://192.168.1.1:9000"
def sonarUser = hasProperty("sonarUser") ? sonarUser : "sonar"
def sonarPwd = hasProperty("sonarPwd") ? sonarPwd : "sonar"

test { ignoreFailures true }

sonarRunner {
	// toolVersion = "2.4"
	
	// Fine grained control over the runner process
	//    forkOptions {
	//        maxHeapSize = '1024m'
	//    }
	sonarProperties {
		property "sonar.host.url", sonarHostURL// "http://192.168.1.1:9000"
		property "sonar.jdbc.url", sonarJdbcURL// "jdbc:mysql://192.168.1.1:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
		property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
		property "sonar.jdbc.username",sonarUser// "sonar"
		property "sonar.jdbc.password", sonarPwd//"sonar"
	}
}



//nexusServer='oss.sonatype.org'
ext.nexusServer='zeus.tocea:8081/nexus'

sourceCompatibility = 1.7
targetCompatibility = 1.7

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

// turn off strict Javadoc checks in Java8 that break the build.
// http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
// you could say that it is better to fix all Javadoc issues instead, but
// they don't seem important enough to justify this.
if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

repositories { mavenCentral() }

dependencies {
	compile ('org.apache.httpcomponents:httpclient:4.5',
			'org.apache.httpcomponents:httpcore:4.4.2',
			'org.apache.httpcomponents:httpmime:4.5',
			'org.json:json:20140107',
			'org.slf4j:slf4j-api:1.7.12')
	
	testCompile(
			'junit:junit:4.12',
			'org.easytesting:fest-assert:1.4',
			'org.slf4j:slf4j-jdk14:1.7.12'
			)
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

// A PGP key is required to sign the artifacts before uploading to OSS Sonatype Maven repository.
// Put the PGP key info in your <home>/.gradle/gradle.properties file:
// signing.keyId=...
// signing.password=...
// signing.secretKeyRingFile=c:/Users/ask/.gnupg/secring.gpg
signing {
	required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

// password can be set in gradle.properties or environment variable (check "build environment" on Jenkins)
// typically you set "ossUser" and "ossPassword" properties in your <home>/.gradle/gradle.properties file,
// standard properties file format: "ossUser=myOssUser", etc.
def ossUserVar = hasProperty("ossUser") ? ossUser : ""
def ossPasswordVar = hasProperty("ossPassword") ? ossPassword : ""

//
uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "http://$nexusServer/content/repositories/redminejavaapi") {
				authentication(userName: ossUserVar, password: ossPasswordVar)
			}
			snapshotRepository(url: "http://$nexusServer/content/repositories/snapshots") {
				authentication(userName: ossUserVar, password: ossPasswordVar)
			}
			//
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			//
			pom.project {
				name 'Redmine Java API'
				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
					}
				}
				url 'http://github.com/sleroy/redmine-java-api'
				description 'Free open-source Java API for Redmine and Chiliproject bug/task management systems.' +
						'This project was originally a part of Task Adapter application (http://www.taskadapter.com)'
				developers {
					developer {
						name 'Alexey Skorokhodov'
						email 'alskor@gmail.com'
					}
					developer {
						name 'Sylvain Leroy'
						email 'sleroy0@gmail.com'
					}
				}
				scm {
					connection 'scm:git:git://github.com/sleroy/redmine-java-api.git'
					// "developerConnection" is required for Maven Release plugin.
					developerConnection 'scm:git:git@github.com:sleroy/redmine-java-api.git'
					tag 'HEAD'
					// A publicly browsable repository. For example, via ViewCVS
					url 'http://github.com/sleroy/redmine-java-api/tree/master/'
				}
				
				issueManagement {
					system 'github'
					url 'http://github.com/sleroy/redmine-java-api/issues'
				}
			}
		}
	}
}

task packageSources(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

artifacts {
	archives packageSources
	archives packageJavadoc
}
